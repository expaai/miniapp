#!/usr/bin/env python3
import requests
import json
import sys

def get_latest_failed_run():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏–π—Å—è –∑–∞–ø—É—Å–∫"""
    url = "https://api.github.com/repos/expaai/miniapp/actions/runs"
    response = requests.get(url)
    
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
        return None
    
    data = response.json()
    
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏–π—Å—è –∑–∞–ø—É—Å–∫
    for run in data['workflow_runs']:
        if run['conclusion'] == 'failure':
            return run
    
    return None

def get_job_logs(job_id):
    """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ job"""
    url = f"https://api.github.com/repos/expaai/miniapp/actions/jobs/{job_id}/logs"
    response = requests.get(url)
    
    if response.status_code == 200:
        return response.text
    else:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –¥–ª—è job {job_id}: {response.status_code}")
        return None

def analyze_logs(logs, job_name):
    """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—à–∏–±–æ–∫"""
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í JOB: {job_name}")
    print("=" * 60)
    
    lines = logs.split('\n')
    error_lines = []
    
    # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ—à–∏–±–∫–∞–º–∏
    for i, line in enumerate(lines):
        if any(keyword in line.lower() for keyword in ['error', 'failed', 'exception', 'traceback', 'fatal']):
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–æ –∏ –ø–æ—Å–ª–µ)
            start = max(0, i-3)
            end = min(len(lines), i+4)
            context = lines[start:end]
            error_lines.extend(context)
            error_lines.append("---")
    
    if error_lines:
        print("‚ùå –ù–ê–ô–î–ï–ù–ù–´–ï –û–®–ò–ë–ö–ò:")
        for line in error_lines:
            print(line)
    else:
        print("‚ÑπÔ∏è –Ø–≤–Ω—ã—Ö –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫:")
        for line in lines[-50:]:
            print(line)

def main():
    print("üö® –ü–û–õ–£–ß–ï–ù–ò–ï –î–ï–¢–ê–õ–¨–ù–´–• –õ–û–ì–û–í –ü–û–°–õ–ï–î–ù–ï–ì–û –ü–†–û–í–ê–õ–ê")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏–π—Å—è –∑–∞–ø—É—Å–∫
    failed_run = get_latest_failed_run()
    if not failed_run:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏—Ö—Å—è –∑–∞–ø—É—Å–∫–æ–≤")
        return
    
    print(f"üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–ª: {failed_run['name']}")
    print(f"   ID: {failed_run['id']}")
    print(f"   –í—Ä–µ–º—è: {failed_run['created_at']}")
    print(f"   URL: {failed_run['html_url']}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ jobs
    jobs_url = f"https://api.github.com/repos/expaai/miniapp/actions/runs/{failed_run['id']}/jobs"
    jobs_response = requests.get(jobs_url)
    
    if jobs_response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è jobs: {jobs_response.status_code}")
        return
    
    jobs_data = jobs_response.json()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏–π—Å—è job
    for job in jobs_data['jobs']:
        if job['conclusion'] == 'failure':
            print(f"\nüìã –ü—Ä–æ–≤–∞–ª–∏–≤—à–∏–π—Å—è Job: {job['name']}")
            print(f"   ID: {job['id']}")
            print(f"   –°—Ç–∞—Ç—É—Å: {job['conclusion']}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏
            logs = get_job_logs(job['id'])
            if logs:
                analyze_logs(logs, job['name'])
            else:
                print("‚ùå –õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —à–∞–≥–æ–≤
                print("\nüìù –î–µ—Ç–∞–ª–∏ —à–∞–≥–æ–≤:")
                for step in job['steps']:
                    status_icon = "‚ùå" if step['conclusion'] == 'failure' else "‚úÖ" if step['conclusion'] == 'success' else "‚è∏Ô∏è"
                    print(f"   {status_icon} {step['name']}: {step['conclusion']}")
                    
                    if step['conclusion'] == 'failure':
                        print(f"      –í—Ä–µ–º—è: {step.get('started_at', 'N/A')} - {step.get('completed_at', 'N/A')}")

if __name__ == "__main__":
    main()