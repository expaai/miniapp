#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ OpenAI API
–í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ 152-–§–ó "–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
"""

import os
import re
import hashlib
from typing import Tuple, List
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import base64

class PersonalDataProtector:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∑–∞—â–∏—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∑—é–º–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ OpenAI API
    """
    
    def __init__(self):
        self.encryption_key = self._get_or_create_key()
        self.cipher = Fernet(self.encryption_key)
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.personal_data_patterns = {
            'phone': r'\+?[78][-\s]?\(?\d{3}\)?[-\s]?\d{3}[-\s]?\d{2}[-\s]?\d{2}',
            'email': r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}',
            'passport': r'\b\d{4}\s?\d{6}\b',
            'inn': r'\b\d{10,12}\b',
            'snils': r'\b\d{3}-\d{3}-\d{3}\s\d{2}\b',
            'address': r'–≥\.?\s*[–ê-–Ø–∞-—è-]+[,\s]+.*?\d+',
            'birth_date': r'\b\d{1,2}[./]\d{1,2}[./]\d{4}\b',
            'full_name': r'\b[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+(?:\s+[–ê-–Ø–Å][–∞-—è—ë]+)?\b'
        }
    
    def _get_or_create_key(self) -> bytes:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        """
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        key_env = os.getenv('ENCRYPTION_KEY')
        if key_env:
            try:
                return base64.urlsafe_b64decode(key_env)
            except Exception:
                pass
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–π —Ñ—Ä–∞–∑—ã
        password = os.getenv('SECRET_PHRASE', 'career-miniapp-secret-2024').encode()
        salt = b'career_miniapp_salt_2024'  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª—É—á–∞–π–Ω—ã–º
        
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
        )
        key = base64.urlsafe_b64encode(kdf.derive(password))
        return key
    
    def anonymize_resume_text(self, resume_text: str) -> Tuple[str, dict]:
        """
        –ê–Ω–æ–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ —Ä–µ–∑—é–º–µ
        
        Args:
            resume_text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ
            
        Returns:
            Tuple[str, dict]: –ê–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —Å–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω
        """
        anonymized_text = resume_text
        replacements = {}
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        for data_type, pattern in self.personal_data_patterns.items():
            matches = re.findall(pattern, anonymized_text, re.IGNORECASE)
            
            for i, match in enumerate(matches):
                placeholder = f"[{data_type.upper()}_{i+1}]"
                anonymized_text = anonymized_text.replace(match, placeholder, 1)
                replacements[placeholder] = match
        
        return anonymized_text, replacements
    
    def encrypt_personal_data(self, data: str) -> str:
        """
        –®–∏—Ñ—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            str: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ base64
        """
        encrypted_data = self.cipher.encrypt(data.encode('utf-8'))
        return base64.urlsafe_b64encode(encrypted_data).decode('utf-8')
    
    def decrypt_personal_data(self, encrypted_data: str) -> str:
        """
        –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        Args:
            encrypted_data: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ base64
            
        Returns:
            str: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        try:
            encrypted_bytes = base64.urlsafe_b64decode(encrypted_data.encode('utf-8'))
            decrypted_data = self.cipher.decrypt(encrypted_bytes)
            return decrypted_data.decode('utf-8')
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    
    def restore_personal_data(self, anonymized_text: str, replacements: dict) -> str:
        """
        –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ
        
        Args:
            anonymized_text: –ê–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            replacements: –°–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω
            
        Returns:
            str: –¢–µ–∫—Å—Ç —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        restored_text = anonymized_text
        
        for placeholder, original_value in replacements.items():
            restored_text = restored_text.replace(placeholder, original_value)
        
        return restored_text
    
    def safe_analyze_resume(self, resume_text: str) -> Tuple[str, str]:
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∑—é–º–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ OpenAI API
        
        Args:
            resume_text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ
            
        Returns:
            Tuple[str, str]: (–∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π_—Ç–µ–∫—Å—Ç, –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ_–∑–∞–º–µ–Ω—ã)
        """
        # –ê–Ω–æ–Ω–∏–º–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        anonymized_text, replacements = self.anonymize_resume_text(resume_text)
        
        # –®–∏—Ñ—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω
        encrypted_replacements = self.encrypt_personal_data(str(replacements))
        
        return anonymized_text, encrypted_replacements
    
    def get_data_processing_notice(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        """
        return """
üîí –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û–ë –û–ë–†–ê–ë–û–¢–ö–ï –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•

–í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º –∑–∞–∫–æ–Ω–æ–º ‚Ññ152-–§–ó "–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö" —É–≤–µ–¥–æ–º–ª—è–µ–º:

‚úÖ –¶–ï–õ–ò –û–ë–†–ê–ë–û–¢–ö–ò:
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
‚Ä¢ –ü–æ–¥–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π
‚Ä¢ –ö–∞—Ä—å–µ—Ä–Ω–æ–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

‚úÖ –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú–´–ï –î–ê–ù–ù–´–ï:
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ä–µ–∑—é–º–µ
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–ª–µ—Ñ–æ–Ω, email)
‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã

‚úÖ –ú–ï–†–´ –ó–ê–©–ò–¢–´:
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä—É—é—Ç—Å—è –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ AES-256
‚Ä¢ –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ API

‚úÖ –í–ê–®–ò –ü–†–ê–í–ê:
‚Ä¢ –û—Ç–∑—ã–≤ —Å–æ–≥–ª–∞—Å–∏—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ

üìß –ö–æ–Ω—Ç–∞–∫—Ç—ã: support@career-miniapp.ru
        """

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
data_protector = PersonalDataProtector()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def anonymize_for_ai(resume_text: str) -> Tuple[str, str]:
    """
    –ê–Ω–æ–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—é–º–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ AI
    
    Returns:
        Tuple[str, str]: (–∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π_—Ç–µ–∫—Å—Ç, –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ_–∑–∞–º–µ–Ω—ã)
    """
    return data_protector.safe_analyze_resume(resume_text)

def restore_from_ai_response(ai_response: str, encrypted_replacements: str) -> str:
    """
    –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ AI (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    
    Args:
        ai_response: –û—Ç–≤–µ—Ç –æ—Ç AI
        encrypted_replacements: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–º–µ–Ω—ã
        
    Returns:
        str: –û—Ç–≤–µ—Ç —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
    """
    try:
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∑–∞–º–µ–Ω—ã
        replacements_str = data_protector.decrypt_personal_data(encrypted_replacements)
        replacements = eval(replacements_str)  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å json.loads
        
        # –í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ AI –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        # –ù–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        return ai_response
    except Exception:
        return ai_response

def encrypt_resume_for_storage(resume_text: str) -> str:
    """
    –®–∏—Ñ—Ä—É–µ—Ç —Ä–µ–∑—é–º–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    return data_protector.encrypt_personal_data(resume_text)

def decrypt_resume_from_storage(encrypted_resume: str) -> str:
    """
    –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —Ä–µ–∑—é–º–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    return data_protector.decrypt_personal_data(encrypted_resume)