#!/usr/bin/env python3
import requests
import json
import sys
from datetime import datetime

def get_workflow_runs():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—É—Å–∫–∏ workflow"""
    url = "https://api.github.com/repos/expaai/miniapp/actions/runs"
    response = requests.get(url)
    
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è workflow runs: {response.status_code}")
        print(response.text)
        return None
    
    return response.json()

def get_job_details(run_id):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ jobs –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ run"""
    url = f"https://api.github.com/repos/expaai/miniapp/actions/runs/{run_id}/jobs"
    response = requests.get(url)
    
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è job details –¥–ª—è run {run_id}: {response.status_code}")
        return None
    
    return response.json()

def analyze_failed_step(step):
    """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–∞–ª–∏–≤—à–µ–≥–æ—Å—è —à–∞–≥–∞"""
    print(f"    ‚ùå –®–∞–≥ '{step['name']}' –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è")
    print(f"       –°—Ç–∞—Ç—É—Å: {step['conclusion']}")
    if 'started_at' in step and 'completed_at' in step:
        print(f"       –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {step['started_at']} - {step['completed_at']}")

def main():
    print("üîç –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –î–ï–ü–õ–û–Ø")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—É—Å–∫–∏
    runs_data = get_workflow_runs()
    if not runs_data:
        return
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(runs_data['workflow_runs'])} –∑–∞–ø—É—Å–∫–æ–≤ workflow")
    print()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø—É—Å–∫–æ–≤
    for i, run in enumerate(runs_data['workflow_runs'][:10]):
        print(f"üöÄ –ó–∞–ø—É—Å–∫ #{i+1}: {run['name']}")
        print(f"   ID: {run['id']}")
        print(f"   –°—Ç–∞—Ç—É—Å: {run['status']} / {run['conclusion']}")
        print(f"   –í–µ—Ç–∫–∞: {run['head_branch']}")
        print(f"   –í—Ä–µ–º—è: {run['created_at']}")
        print(f"   URL: {run['html_url']}")
        
        # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏
        if run['conclusion'] == 'failure':
            print(f"   ‚ùå –ü–†–û–í–ê–õ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏...")
            
            job_details = get_job_details(run['id'])
            if job_details and 'jobs' in job_details:
                for job in job_details['jobs']:
                    print(f"     üìã Job: {job['name']}")
                    print(f"        –°—Ç–∞—Ç—É—Å: {job['status']} / {job['conclusion']}")
                    
                    if job['conclusion'] == 'failure':
                        print(f"        ‚ùå JOB –ü–†–û–í–ê–õ–ò–õ–°–Ø")
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —à–∞–≥–∏
                        for step in job['steps']:
                            if step['conclusion'] == 'failure':
                                analyze_failed_step(step)
                                
                                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
                                if 'number' in step:
                                    log_url = f"https://api.github.com/repos/expaai/miniapp/actions/jobs/{job['id']}/logs"
                                    print(f"        üìù –õ–æ–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ: {log_url}")
        
        print()
    
    print("üîç –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
    print("=" * 50)
    
    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    failed_runs = [run for run in runs_data['workflow_runs'][:10] if run['conclusion'] == 'failure']
    success_runs = [run for run in runs_data['workflow_runs'][:10] if run['conclusion'] == 'success']
    
    print(f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø—É—Å–∫–æ–≤):")
    print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–æ–≤: {len(failed_runs)}")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {len(success_runs)}")
    print(f"   üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {len(success_runs)/10*100:.1f}%")
    
    if failed_runs:
        print(f"\nüö® –ü–û–°–õ–ï–î–ù–ò–ï –ü–†–û–í–ê–õ–´:")
        for run in failed_runs[:3]:
            print(f"   - {run['name']} ({run['created_at']})")

if __name__ == "__main__":
    main()