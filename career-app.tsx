"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { useTelegram } from "@/hooks/use-telegram"
import { useAPI, CareerAdviceResponse, ProfessionSelectionRequest, JobMatchingRequest, UserRoleRequest, SessionStateRequest } from "@/hooks/use-api"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { Home, TrendingUp, User, ChevronRight, Star, Crown, Zap, Target, Loader2 } from "lucide-react"
import ResumeImprovement from "@/components/resume-improvement"

type Role = "student" | "professional" | null
type Goal = string

const studentGoals = [
  "–•–æ—á—É —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ",
  "–•–æ—á—É —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—é–º–µ",
  "–•–æ—á—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ü–µ–ª—å—é",
  "–•–æ—á—É –ø–æ–ª—É—á–∏—Ç—å –ª–∏—á–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
]

const professionalGoals = [
  "–•–æ—á—É —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—é–º–µ",
  "–•–æ—á—É –ø–æ–Ω—è—Ç—å —Å–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã",
  "–•–æ—á—É –ø–æ–ª—É—á–∏—Ç—å –ª–∏—á–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
]

const additionalServices = [
  { title: "–ü–æ–Ω—è—Ç—å —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã", icon: "üéØ", premium: false },
  { title: "–ü–æ–¥–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π", icon: "üìä", premium: false },
  { title: "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç—ã", icon: "üß†", premium: false },
  { title: "–ü–æ–ª—É—á–∏—Ç—å –ª–∏—á–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", icon: "üë®‚Äçüíº", premium: true },
]

const professions = [
  "Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
  "Backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
  "Fullstack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
  "Mobile —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
  "DevOps –∏–Ω–∂–µ–Ω–µ—Ä",
  "Data Scientist",
  "AI/ML –∏–Ω–∂–µ–Ω–µ—Ä",
  "Product Manager",
  "UX/UI –¥–∏–∑–∞–π–Ω–µ—Ä",
  "QA –∏–Ω–∂–µ–Ω–µ—Ä"
]

export default function CareerMiniApp() {
  const router = useRouter()
  const [currentScreen, setCurrentScreen] = useState<"role" | "goals" | "profession" | "main" | "advice" | "resume">("role")
  
  // –û—Ç–ª–∞–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π currentScreen
  useEffect(() => {
    console.log('üîÑ currentScreen –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞:', currentScreen)
  }, [currentScreen])
  const [selectedRole, setSelectedRole] = useState<Role>(null)
  const [selectedGoal, setSelectedGoal] = useState<Goal>("")
  const [selectedProfession, setSelectedProfession] = useState<string>("")
  const [careerAdvice, setCareerAdvice] = useState<CareerAdviceResponse | null>(null)
  const [isInitialized, setIsInitialized] = useState(false)
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('üîÑ –†–ï–ù–î–ï–† –ö–û–ú–ü–û–ù–ï–ù–¢–ê! currentScreen:', currentScreen, 'selectedGoal:', selectedGoal)
  const { user, isReady, showMainButton, hideMainButton, showBackButton, hideBackButton, hapticFeedback } = useTelegram()
  const { getCareerAdvice, loading, error, clearError, logProfessionSelection, getJobMatches, saveUserRole, saveUserGoal, getSessionState } = useAPI()
  const [sessionId, setSessionId] = useState<string>("")
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const userName = user?.first_name || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ localStorage
  const saveStateToLocalStorage = () => {
    const state = {
      selectedRole,
      selectedGoal,
      selectedProfession,
      sessionId,
      currentScreen
    }
    localStorage.setItem('careerAppState', JSON.stringify(state))
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ localStorage
  const loadStateFromLocalStorage = () => {
    try {
      const savedState = localStorage.getItem('careerAppState')
      if (savedState) {
        const state = JSON.parse(savedState)
        return state
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ localStorage:', error)
    }
    return null
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    if (!isReady || !user?.id || isInitialized) return

    const initializeState = async () => {
      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        const sessionStateRequest: SessionStateRequest = {
          user_id: user.id.toString()
        }
        
        const sessionState = await getSessionState(sessionStateRequest)
        
        if (sessionState && sessionState.current_screen !== 'role') {
          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
          if (sessionState.user_role) {
            setSelectedRole(sessionState.user_role as Role)
          }
          if (sessionState.career_goal) {
            setSelectedGoal(sessionState.career_goal)
          }
          if (sessionState.selected_profession) {
            setSelectedProfession(sessionState.selected_profession)
          }
          if (sessionState.session_id) {
            setSessionId(sessionState.session_id)
          }
          setCurrentScreen(sessionState.current_screen as any)
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage
          const localState = loadStateFromLocalStorage()
          if (localState) {
            if (localState.selectedRole) setSelectedRole(localState.selectedRole)
            if (localState.selectedGoal) setSelectedGoal(localState.selectedGoal)
            if (localState.selectedProfession) setSelectedProfession(localState.selectedProfession)
            if (localState.sessionId) setSessionId(localState.sessionId)
            if (localState.currentScreen && localState.currentScreen !== 'role') {
              setCurrentScreen(localState.currentScreen)
            }
          }
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error)
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage
        const localState = loadStateFromLocalStorage()
        if (localState) {
          if (localState.selectedRole) setSelectedRole(localState.selectedRole)
          if (localState.selectedGoal) setSelectedGoal(localState.selectedGoal)
          if (localState.selectedProfession) setSelectedProfession(localState.selectedProfession)
          if (localState.sessionId) setSessionId(localState.sessionId)
          if (localState.currentScreen && localState.currentScreen !== 'role') {
            setCurrentScreen(localState.currentScreen)
          }
        }
      } finally {
        setIsInitialized(true)
      }
    }

    initializeState()
  }, [isReady, user?.id, isInitialized, getSessionState])

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
  useEffect(() => {
    if (isInitialized) {
      saveStateToLocalStorage()
    }
  }, [selectedRole, selectedGoal, selectedProfession, sessionId, currentScreen, isInitialized])

  const handleRoleSelect = async (role: Role) => {
    hapticFeedback.impact('light')
    setSelectedRole(role)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    if (user?.id) {
      try {
        const userRoleRequest: UserRoleRequest = {
          user_id: user.id.toString(),
          user_role: role
        }
        
        const response = await saveUserRole(userRoleRequest)
        if (response?.session_id) {
          setSessionId(response.session_id)
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
      }
    }
    
    setCurrentScreen("goals")
  }

  const handleGoalSelect = async (goal: Goal) => {
    hapticFeedback.impact('light')
    setSelectedGoal(goal)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    if (user?.id) {
      try {
        const userGoalRequest = {
          user_id: user.id.toString(),
          user_goal: goal
        }
        
        await saveUserGoal(userGoalRequest)
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
      }
    }
  }

  const handleContinue = () => {
    if (selectedGoal) {
      hapticFeedback.notification('success')
      setCurrentScreen("main")
    }
  }

  const handleGetCareerAdvice = async () => {
    console.log('üî• –ö–ù–û–ü–ö–ê –ù–ê–ñ–ê–¢–ê! selectedGoal:', selectedGoal, 'selectedRole:', selectedRole)
    console.log('üîç –¢–µ–∫—É—â–∏–π currentScreen –î–û –∏–∑–º–µ–Ω–µ–Ω–∏—è:', currentScreen)
    
    if (!selectedGoal || !selectedRole) {
      console.log('‚ùå –ù–µ—Ç selectedGoal –∏–ª–∏ selectedRole')
      return
    }
    
    hapticFeedback.impact('medium')
    
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ü–µ–ª—å —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—é–º–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É —Ä–µ–∑—é–º–µ
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª—å:', selectedGoal.toLowerCase())
    const isImproveResume = selectedGoal.toLowerCase().includes('—Ö–æ—á—É —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—é–º–µ')
    console.log('üîç –°–æ–¥–µ—Ä–∂–∏—Ç "—Ö–æ—á—É —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—é–º–µ"?', isImproveResume)
    
    if (isImproveResume) {
      console.log('‚úÖ –ü–ï–†–ï–•–û–î–ò–ú –ö –≠–ö–†–ê–ù–£ –†–ï–ó–Æ–ú–ï!')
      console.log('üîÑ –í—ã–∑—ã–≤–∞–µ–º setCurrentScreen("resume")')
      setCurrentScreen('resume')
      console.log('üì± setCurrentScreen("resume") –≤—ã–∑–≤–∞–Ω')
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ setTimeout
      setTimeout(() => {
        console.log('‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ 100–º—Å - currentScreen –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "resume"')
      }, 100)
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 500–º—Å
      setTimeout(() => {
        console.log('‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ 500–º—Å - currentScreen –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "resume"')
      }, 500)
      
      return
    }
    
    clearError()
    
    const request = {
      user_goal: selectedGoal,
      experience_level: selectedRole === 'student' ? 'junior' : 'middle',
      current_role: selectedRole === 'student' ? undefined : '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
      interests: [selectedGoal]
    }
    
    const response = await getCareerAdvice(request)
    if (response) {
      setCareerAdvice(response)
      setCurrentScreen('advice')
      hapticFeedback.notification('success')
    }
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ Telegram –ø—Ä–∏ —Å–º–µ–Ω–µ —ç–∫—Ä–∞–Ω–æ–≤
  useEffect(() => {
    if (!isReady) return

    // –í—Å–µ–≥–¥–∞ —Å–∫—Ä—ã–≤–∞–µ–º MainButton, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    hideMainButton()

    if (currentScreen === "goals") {
      showBackButton(() => {
        hapticFeedback.impact('light')
        setCurrentScreen("role")
      })
    } else if (currentScreen === "profession") {
      showBackButton(() => {
        hapticFeedback.impact('light')
        setCurrentScreen("goals")
      })
    } else if (currentScreen === "main") {
      showBackButton(() => {
        hapticFeedback.impact('light')
        setCurrentScreen("profession")
      })
    } else if (currentScreen === "advice") {
      showBackButton(() => {
        hapticFeedback.impact('light')
        setCurrentScreen("main")
      })
    } else if (currentScreen === "resume") {
      showBackButton(() => {
        hapticFeedback.impact('light')
        setCurrentScreen("goals")
      })
    } else {
      hideBackButton()
    }

    return () => {
      hideMainButton()
      hideBackButton()
    }
  }, [currentScreen, isReady, showBackButton, hideBackButton, hideMainButton, hapticFeedback])

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
  const currentGoals = selectedRole === "student" ? studentGoals : professionalGoals

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥
  const getFilteredAdditionalServices = () => {
    if (!selectedGoal) return additionalServices
    
    const selectedGoalLower = selectedGoal.toLowerCase()
    
    return additionalServices.filter(service => {
      const serviceLower = service.title.toLowerCase()
      
      // –ò—Å–∫–ª—é—á–∞–µ–º —É—Å–ª—É–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥—É–±–ª–∏—Ä—É—é—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ü–µ–ª—å
      if (serviceLower.includes('—Ä–µ–∑—é–º–µ') && selectedGoalLower.includes('—Ä–µ–∑—é–º–µ')) {
        return false
      }
      if (serviceLower.includes('—Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã') && selectedGoalLower.includes('—Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã')) {
        return false
      }
      
      return true
    })
  }

  if (currentScreen === "role") {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-4 relative overflow-hidden">
        {/* Background decorative elements */}
        <div className="absolute top-0 left-0 w-full h-full">
          <div className="absolute top-20 left-10 w-32 h-32 bg-gradient-to-r from-purple-400 to-pink-400 rounded-full blur-3xl opacity-20"></div>
          <div className="absolute bottom-40 right-10 w-40 h-40 bg-gradient-to-r from-blue-400 to-cyan-400 rounded-full blur-3xl opacity-20"></div>
        </div>

        <div className="max-w-sm mx-auto pt-12 relative z-10">
          <div className="text-center mb-8">
            <div className="w-20 h-20 bg-gradient-to-r from-amber-400 to-orange-500 rounded-2xl flex items-center justify-center mx-auto mb-6 shadow-2xl shadow-amber-500/25">
              <Crown className="w-10 h-10 text-white" />
            </div>
            <h1 className="text-3xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent mb-3">
              –ü—Ä–∏–≤–µ—Ç, {userName}!
            </h1>
            <p className="text-gray-300 text-lg">–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–ø—ã—Ç–∞</p>
          </div>

          <div className="space-y-6">
            <Card
              className="cursor-pointer hover:scale-105 transition-all duration-300 border-0 bg-gradient-to-r from-emerald-500 to-teal-600 shadow-2xl shadow-emerald-500/25 hover:shadow-emerald-500/40"
              onClick={() => handleRoleSelect("student")}
            >
              <CardContent className="p-6 relative overflow-hidden">
                <div className="absolute top-0 right-0 w-20 h-20 bg-white/10 rounded-full -translate-y-10 translate-x-10"></div>
                <div className="flex items-center justify-between relative z-10">
                  <div>
                    <h3 className="text-xl font-bold text-white mb-2">–°—Ç—É–¥–µ–Ω—Ç üéì</h3>
                    <p className="text-emerald-100">–ù–∞—á–∏–Ω–∞—é –∫–∞—Ä—å–µ—Ä–Ω—ã–π –ø—É—Ç—å</p>
                  </div>
                  <div className="w-16 h-16 bg-white/20 backdrop-blur-sm rounded-2xl flex items-center justify-center">
                    <span className="text-3xl">üéì</span>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card
              className="cursor-pointer hover:scale-105 transition-all duration-300 border-0 bg-gradient-to-r from-blue-600 to-purple-700 shadow-2xl shadow-blue-500/25 hover:shadow-blue-500/40"
              onClick={() => handleRoleSelect("professional")}
            >
              <CardContent className="p-6 relative overflow-hidden">
                <div className="absolute top-0 right-0 w-20 h-20 bg-white/10 rounded-full -translate-y-10 translate-x-10"></div>
                <div className="flex items-center justify-between relative z-10">
                  <div>
                    <h3 className="text-xl font-bold text-white mb-2">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª</h3>
                    <p className="text-blue-100">–†–∞–∑–≤–∏–≤–∞—é –∫–∞—Ä—å–µ—Ä—É</p>
                  </div>
                  <div className="w-16 h-16 bg-white/20 backdrop-blur-sm rounded-2xl flex items-center justify-center">
                    <span className="text-3xl">üíº</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    )
  } else if (currentScreen === "goals") {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-4 relative overflow-hidden">
        {/* Background decorative elements */}
        <div className="absolute top-0 left-0 w-full h-full">
          <div className="absolute top-32 right-8 w-24 h-24 bg-gradient-to-r from-pink-400 to-rose-400 rounded-full blur-2xl opacity-30"></div>
          <div className="absolute bottom-32 left-8 w-32 h-32 bg-gradient-to-r from-cyan-400 to-blue-400 rounded-full blur-2xl opacity-30"></div>
        </div>

        <div className="max-w-sm mx-auto pt-8 relative z-10">
          <div className="text-center mb-8">
            <div className="w-16 h-16 bg-gradient-to-r from-amber-400 to-orange-500 rounded-xl flex items-center justify-center mx-auto mb-4 shadow-xl">
              <Target className="w-8 h-8 text-white" />
            </div>
            <h1 className="text-3xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent mb-3">
              –í–∞—à–∏ —Ü–µ–ª–∏
            </h1>
            <p className="text-gray-300 text-lg">–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å</p>
          </div>

          <div className="space-y-4 mb-8">
            {currentGoals.map((goal, index) => (
              <div
                key={index}
                className={`
                  relative p-5 rounded-2xl cursor-pointer transition-all duration-300 border
                  ${
                    selectedGoal === goal
                      ? "bg-gradient-to-r from-blue-600 to-purple-600 border-blue-400 shadow-2xl shadow-blue-500/25 scale-105"
                      : "bg-white/10 backdrop-blur-sm border-white/20 hover:bg-white/20 hover:scale-102"
                  }
                `}
                onClick={() => handleGoalSelect(goal)}
              >
                <div className="flex items-center justify-between">
                  <span
                    className={`font-medium ${selectedGoal === goal ? "text-white" : "text-gray-200"}`}
                  >
                    {goal}
                  </span>
                  {selectedGoal === goal && (
                    <div className="w-6 h-6 bg-white/20 rounded-full flex items-center justify-center">
                      <Zap className="w-4 h-4 text-white" />
                    </div>
                  )}
                </div>
                {selectedGoal === goal && (
                  <div className="absolute inset-0 bg-gradient-to-r from-blue-600/20 to-purple-600/20 rounded-2xl blur-xl"></div>
                )}
              </div>
            ))}
          </div>

          <Button
            onClick={handleContinue}
            disabled={!selectedGoal}
            className="w-full py-4 text-lg font-semibold bg-gradient-to-r from-amber-500 to-orange-600 hover:from-amber-600 hover:to-orange-700 border-0 shadow-2xl shadow-amber-500/25 hover:shadow-amber-500/40 transition-all duration-300"
          >
            <span className="mr-2">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</span>
            <ChevronRight className="w-5 h-5" />
          </Button>
        </div>
      </div>
    )
  } else if (currentScreen === "profession") {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-4 relative overflow-hidden">
        {/* Background decorative elements */}
        <div className="absolute top-0 left-0 w-full h-full">
          <div className="absolute top-32 right-8 w-24 h-24 bg-gradient-to-r from-pink-400 to-rose-400 rounded-full blur-2xl opacity-30"></div>
          <div className="absolute bottom-32 left-8 w-32 h-32 bg-gradient-to-r from-cyan-400 to-blue-400 rounded-full blur-2xl opacity-30"></div>
        </div>

        <div className="max-w-sm mx-auto pt-8 relative z-10">
          <div className="text-center mb-8">
            <div className="w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-600 rounded-xl flex items-center justify-center mx-auto mb-4 shadow-xl">
              <User className="w-8 h-8 text-white" />
            </div>
            <h1 className="text-3xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent mb-3">
              –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
            </h1>
            <p className="text-gray-300 text-lg">–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏</p>
          </div>

          <div className="space-y-3 mb-8">
            {professions.map((profession, index) => (
              <div
                key={index}
                className={`
                  relative p-4 rounded-xl cursor-pointer transition-all duration-300 border
                  ${
                    selectedProfession === profession
                      ? "bg-gradient-to-r from-blue-600 to-purple-600 border-blue-400 shadow-xl shadow-blue-500/25 scale-105"
                      : "bg-white/10 backdrop-blur-sm border-white/20 hover:bg-white/20 hover:scale-102"
                  }
                `}
                onClick={() => {
                  hapticFeedback.impact('light')
                  setSelectedProfession(profession)
                }}
              >
                <div className="flex items-center justify-between">
                  <span className="text-white font-medium">{profession}</span>
                  {selectedProfession === profession && (
                    <div className="w-6 h-6 bg-white rounded-full flex items-center justify-center">
                      <div className="w-3 h-3 bg-blue-600 rounded-full"></div>
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>

          <Button
            onClick={async () => {
              if (selectedProfession) {
                hapticFeedback.notification('success')
                
                // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
                const professionRequest: ProfessionSelectionRequest = {
                  user_id: user?.id?.toString(),
                  selected_profession: selectedProfession,
                  user_role: selectedRole || undefined,
                  user_goal: selectedGoal,
                  timestamp: new Date().toISOString()
                }
                
                const logResponse = await logProfessionSelection(professionRequest)
                if (logResponse?.session_id) {
                  setSessionId(logResponse.session_id)
                  console.log('‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞, session_id:', logResponse.session_id)
                }
                
                setCurrentScreen("main")
              }
            }}
            disabled={!selectedProfession}
            className="w-full py-4 text-lg font-semibold bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 border-0 shadow-2xl shadow-blue-500/25 hover:shadow-blue-500/40 transition-all duration-300"
          >
            <span className="mr-2">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</span>
            <ChevronRight className="w-5 h-5" />
          </Button>
        </div>
      </div>
    )
  } else if (currentScreen === "advice" && careerAdvice) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-4 relative overflow-hidden">
        {/* Background decorative elements */}
        <div className="absolute top-0 left-0 w-full h-full">
          <div className="absolute top-20 left-10 w-32 h-32 bg-gradient-to-r from-emerald-400 to-teal-400 rounded-full blur-3xl opacity-20"></div>
          <div className="absolute bottom-40 right-10 w-40 h-40 bg-gradient-to-r from-blue-400 to-cyan-400 rounded-full blur-3xl opacity-20"></div>
        </div>

        <div className="max-w-sm mx-auto pt-8 relative z-10">
          <div className="text-center mb-8">
            <div className="w-16 h-16 bg-gradient-to-r from-emerald-500 to-teal-600 rounded-xl flex items-center justify-center mx-auto mb-4 shadow-xl">
              <Zap className="w-8 h-8 text-white" />
            </div>
            <h1 className="text-3xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent mb-3">
              –í–∞—à –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Å–æ–≤–µ—Ç
            </h1>
            <p className="text-gray-300 text-lg">–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</p>
          </div>

          <div className="space-y-6 mb-8">
            {/* –û—Å–Ω–æ–≤–Ω–æ–π —Å–æ–≤–µ—Ç */}
            <Card className="bg-white/10 backdrop-blur-sm border-white/20 border">
              <CardContent className="p-6">
                <h3 className="text-lg font-bold text-white mb-3">üí° –ì–ª–∞–≤–Ω—ã–π —Å–æ–≤–µ—Ç</h3>
                <p className="text-gray-200 leading-relaxed">{careerAdvice.advice}</p>
              </CardContent>
            </Card>

            {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
            <Card className="bg-white/10 backdrop-blur-sm border-white/20 border">
              <CardContent className="p-6">
                <h3 className="text-lg font-bold text-white mb-3">üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
                <div className="space-y-2">
                  {careerAdvice.recommendations.map((rec, index) => (
                    <div key={index} className="flex items-start gap-3">
                      <div className="w-2 h-2 bg-emerald-400 rounded-full mt-2 flex-shrink-0"></div>
                      <p className="text-gray-200 text-sm">{rec}</p>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ */}
            <Card className="bg-white/10 backdrop-blur-sm border-white/20 border">
              <CardContent className="p-6">
                <h3 className="text-lg font-bold text-white mb-3">üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏</h3>
                <div className="space-y-3">
                  {careerAdvice.next_steps.map((step, index) => (
                    <div key={index} className="flex items-start gap-3">
                      <div className="w-6 h-6 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center flex-shrink-0">
                        <span className="text-white text-xs font-bold">{index + 1}</span>
                      </div>
                      <p className="text-gray-200 text-sm">{step}</p>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>

          <Button
            onClick={() => setCurrentScreen("main")}
            className="w-full py-4 text-lg font-semibold bg-gradient-to-r from-emerald-500 to-teal-600 hover:from-emerald-600 hover:to-teal-700 border-0 shadow-2xl shadow-emerald-500/25 hover:shadow-emerald-500/40 transition-all duration-300"
          >
            <span className="mr-2">–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–π</span>
            <Home className="w-5 h-5" />
          </Button>
        </div>
      </div>
    )
  } else if (currentScreen === "resume") {
    console.log('üéØ –†–ï–ù–î–ï–†–ò–ú –≠–ö–†–ê–ù –†–ï–ó–Æ–ú–ï!')
    return (
      <ResumeImprovement 
        onBack={() => {
          hapticFeedback.impact('light')
          setCurrentScreen("goals")
        }}
        selectedRole={selectedRole}
        selectedGoal={selectedGoal}
        selectedProfession={selectedProfession}
      />
    )
  } else if (currentScreen === "main") {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-gray-100">
        {/* Header */}
        <div className="bg-gradient-to-r from-slate-900 to-purple-900 shadow-2xl">
          <div className="max-w-sm mx-auto p-6">
            <div className="flex items-center gap-4">
              <div className="relative">
                <Avatar className="w-14 h-14 border-2 border-white/20">
                  <AvatarFallback className="bg-gradient-to-r from-amber-500 to-orange-600 text-white text-lg font-bold">
                    {userName.charAt(0)}
                  </AvatarFallback>
                </Avatar>
                <div className="absolute -bottom-1 -right-1 w-5 h-5 bg-emerald-500 rounded-full border-2 border-white"></div>
              </div>
              <div className="flex-1">
                <h2 className="text-xl font-bold text-white">{userName}</h2>
                <p className="text-gray-300 text-sm capitalize">{selectedRole === "student" ? "–°—Ç—É–¥–µ–Ω—Ç" : "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª"}</p>
              </div>
              <div className="text-right">
                <div className="flex items-center gap-1 text-amber-400">
                  <Star className="w-4 h-4 fill-current" />
                  <span className="text-sm font-semibold">4.9</span>
                </div>
                <p className="text-gray-400 text-xs">–†–µ–π—Ç–∏–Ω–≥</p>
              </div>
            </div>
          </div>
        </div>

        {/* Main Content */}
        <div className="max-w-sm mx-auto p-6">
          {/* Selected Goal Card */}
          <Card className="mb-6 bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200">
            <CardContent className="p-6">
              <div className="flex items-center gap-3 mb-3">
                <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center">
                  <Target className="w-5 h-5 text-white" />
                </div>
                <div>
                  <h3 className="font-semibold text-gray-900">–í–∞—à–∞ —Ü–µ–ª—å</h3>
                  <p className="text-sm text-gray-600">{selectedGoal}</p>
                </div>
              </div>
              <Button
                onClick={handleGetCareerAdvice}
                disabled={loading}
                className="w-full bg-gradient-to-r from-blue-600 to-indigo-700 hover:from-blue-700 hover:to-indigo-800 text-white border-0 shadow-lg"
              >
                {loading ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    –ü–æ–ª—É—á–∞–µ–º —Å–æ–≤–µ—Ç...
                  </>
                ) : (
                  <>
                    <Zap className="w-4 h-4 mr-2" />
                    –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Å–æ–≤–µ—Ç
                  </>
                )}
              </Button>
              {error && (
                <p className="text-red-600 text-sm mt-2 text-center">{error}</p>
              )}
            </CardContent>
          </Card>

          {/* Additional Services */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏</h3>
            <div className="space-y-3">
              {getFilteredAdditionalServices().map((service, index) => (
                <Card 
                  key={index} 
                  className="hover:shadow-md transition-shadow cursor-pointer"
                  onClick={() => {
                    if (service.title === "–ü–æ–¥–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π") {
                      hapticFeedback.impact('light')
                      setCurrentScreen("profession")
                    }
                  }}
                >
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <span className="text-2xl">{service.icon}</span>
                        <div>
                          <h4 className="font-medium text-gray-900">{service.title}</h4>
                          {service.premium && (
                            <span className="inline-flex items-center gap-1 text-xs text-amber-600 bg-amber-50 px-2 py-1 rounded-full mt-1">
                              <Crown className="w-3 h-3" />
                              Premium
                            </span>
                          )}
                        </div>
                      </div>
                      <ChevronRight className="w-5 h-5 text-gray-400" />
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        </div>

        {/* Bottom Navigation */}
        <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200">
          <div className="max-w-sm mx-auto px-6 py-4">
            <div className="flex justify-around">
              <Button variant="ghost" className="flex-col h-auto py-3 px-6 bg-blue-50 text-blue-600 rounded-2xl">
                <Home className="w-6 h-6 mb-1" />
                <span className="text-xs">–ì–ª–∞–≤–Ω–∞—è</span>
              </Button>
              <Button variant="ghost" className="flex-col h-auto py-3 px-6 hover:bg-gray-50 rounded-2xl">
                <TrendingUp className="w-6 h-6 mb-1 text-gray-400" />
                <span className="text-xs text-gray-400">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</span>
              </Button>
              <Button variant="ghost" className="flex-col h-auto py-3 px-6 hover:bg-gray-50 rounded-2xl">
                <User className="w-6 h-6 mb-1 text-gray-400" />
                <span className="text-xs text-gray-400">–ü—Ä–æ—Ñ–∏–ª—å</span>
              </Button>
            </div>
          </div>
        </div>
      </div>
    )
  } else if (currentScreen === "resume") {
    return (
      <ResumeImprovement 
        onBack={() => setCurrentScreen("goals")}
        selectedRole={selectedRole}
        selectedGoal={selectedGoal}
        selectedProfession={selectedProfession}
        sessionId={sessionId}
      />
    )
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
  if (!isInitialized) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 bg-gradient-to-r from-amber-400 to-orange-500 rounded-2xl flex items-center justify-center mx-auto mb-4 shadow-2xl shadow-amber-500/25">
            <Loader2 className="w-8 h-8 text-white animate-spin" />
          </div>
          <h2 className="text-xl font-bold text-white mb-2">–ó–∞–≥—Ä—É–∑–∫–∞...</h2>
          <p className="text-gray-300">–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</p>
        </div>
      </div>
    )
  }

  // Fallback - –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å
  return null
}
